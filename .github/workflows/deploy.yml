name: Deploy to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" > .env
          echo "TIMEZONE=Europe/Moscow" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@postgres:5432/${{ secrets.POSTGRES_DB }}" >> .env

      - name: Copy files to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          source: ".,!node_modules,!postgres_data,!.git"
          target: "/opt/telegram-bot"
          strip_components: 0

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            # Переходим в директорию проекта
            cd /opt/telegram-bot

            # Проверяем наличие docker и docker-compose
            if ! command -v docker &> /dev/null; then
              echo "Docker не установлен. Устанавливаем..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $USER
            fi

            if ! command -v docker-compose &> /dev/null; then
              echo "Docker Compose не установлен. Устанавливаем..."
              sudo apt-get update
              sudo apt-get install -y docker-compose-plugin
            fi

            # Останавливаем и удаляем старые контейнеры
            docker-compose down telegram-bot

            # Удаляем старые образы
            docker image prune -af

            # Собираем и запускаем новые контейнеры
            docker-compose up -d --build

            # Проверяем статус контейнеров
            docker-compose ps

            # Выводим логи для проверки
            docker-compose logs --tail=100

            # Очищаем неиспользуемые образы и volumes
            docker system prune -f

#      - name: Post-deploy actions
#        run: |
#          npm install
#          npx prisma migrate deploy
#        env:
#          DATABASE_URL: ${{ secrets.DATABASE_URL }}