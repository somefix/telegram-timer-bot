import { Injectable, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { PrismaService } from '../prisma/prisma.service';
import * as TelegramBot from 'node-telegram-bot-api';
import * as moment from 'moment-timezone';

interface Timer {
  id: string;
  eventDate: moment.Moment;
  chatId: number;
  pinnedMessageId: number | null;
  isRunning: boolean;
}

@Injectable()
export class TelegramService implements OnModuleInit {
  private bot: TelegramBot;
  private readonly timezone: string;
  private timers: Map<string, Timer> = new Map();
  private dateTimeState: {
    [key: string]: {
      year?: number;
      month?: number;
      day?: number;
      hour?: number;
      minute?: number;
      timerId?: string;
    };
  } = {};

  constructor(
    private configService: ConfigService,
    private prisma: PrismaService,
  ) {
    this.timezone =
      this.configService.get<string>('TIMEZONE') || 'Europe/Moscow';
  }

  async onModuleInit() {
    const token = this.configService.get<string>('TELEGRAM_BOT_TOKEN');

    if (!token) {
      throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    }

    this.bot = new TelegramBot(token, { polling: true });

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await this.restoreTimers();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    this.bot.setMyCommands([
      {
        command: '/start',
        description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º',
      },
      {
        command: '/setdate',
        description: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é',
      },
      {
        command: '/mytimers',
        description: '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã',
      },
      {
        command: '/cleartimer',
        description: '–£–¥–∞–ª–∏—Ç—å —Ç–∞–π–º–µ—Ä',
      },
      {
        command: '/help',
        description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º',
      },
    ]);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏
    this.bot.onText(/\/help/, (msg) => {
      this.handleErrors(async () => {
        const helpText =
          'ü§ñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*\n\n' +
          'üìã *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n' +
          '‚ñ´Ô∏è /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n' +
          '‚ñ´Ô∏è /setdate - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä —á–µ—Ä–µ–∑ —É–¥–æ–±–Ω–æ–µ –º–µ–Ω—é\n' +
          '‚ñ´Ô∏è /mytimers - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤\n' +
          '‚ñ´Ô∏è /cleartimer - –£–¥–∞–ª–∏—Ç—å —Ç–∞–π–º–µ—Ä (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å ID: /cleartimer ID)\n' +
          '‚ñ´Ô∏è /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n' +
          'üìù *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n' +
          '‚ñ´Ô∏è –ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –≤—Ä—É—á–Ω—É—é: /setdate –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n' +
          '‚ñ´Ô∏è –ü—Ä–∏–º–µ—Ä: /setdate 31.12.2024 23:59\n' +
          '‚ñ´Ô∏è –ö–∞–∂–¥—ã–π —Ç–∞–π–º–µ—Ä –∏–º–µ–µ—Ç —Å–≤–æ–π ID –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n' +
          '‚ñ´Ô∏è –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞–π–º–µ—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\n\n' +
          '‚ö°Ô∏è *–ü–æ–¥—Å–∫–∞–∑–∫–∏:*\n' +
          '‚ñ´Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mytimers –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ID –≤–∞—à–∏—Ö —Ç–∞–π–º–µ—Ä–æ–≤\n' +
          '‚ñ´Ô∏è –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è ID –ø–æ—è–≤–∏—Ç—Å—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞';

        await this.bot.sendMessage(msg.chat.id, helpText, {
          parse_mode: 'Markdown',
          disable_web_page_preview: true,
        });
      });
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    this.bot.onText(/\/start/, (msg) => {
      this.handleErrors(async () => {
        const welcomeText =
          'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞–º–∏\n\n' +
          'üî• *–ß—Ç–æ —è —É–º–µ—é:*\n' +
          '‚ñ´Ô∏è –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞–π–º–µ—Ä–æ–≤\n' +
          '‚ñ´Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è\n' +
          '‚ñ´Ô∏è –£–≤–µ–¥–æ–º–ª—è—Ç—å –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ\n\n' +
          'üöÄ *–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã:*\n' +
          '1Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setdate –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞\n' +
          '2Ô∏è‚É£ /mytimers –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –≤–∞—à–∏ —Ç–∞–π–º–µ—Ä—ã\n' +
          '3Ô∏è‚É£ /help —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –æ–±–æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö\n\n' +
          '‚ú® –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –ù–∞–∂–º–∏—Ç–µ /setdate!';

        await this.bot.sendMessage(msg.chat.id, welcomeText, {
          parse_mode: 'Markdown',
          disable_web_page_preview: true,
        });
      });
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ mytimers
    this.bot.onText(/\/mytimers/, (msg) => {
      this.handleErrors(async () => {
        const userTimers = Array.from(this.timers.values()).filter(
          (timer) => timer.chatId === msg.chat.id,
        );

        if (userTimers.length === 0) {
          await this.bot.sendMessage(
            msg.chat.id,
            '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤',
          );
          return;
        }

        const timersList = userTimers
          .map((timer, index) => {
            const remaining = moment.duration(timer.eventDate.diff(moment()));
            let timeLeft = '';

            if (remaining.years() > 0) timeLeft += `${remaining.years()}–≥ `;
            if (remaining.months() > 0) timeLeft += `${remaining.months()}–º `;
            if (remaining.days() > 0) timeLeft += `${remaining.days()}–¥ `;
            if (remaining.hours() > 0) timeLeft += `${remaining.hours()}—á `;
            if (remaining.minutes() > 0)
              timeLeft += `${remaining.minutes()}–º–∏–Ω `;
            timeLeft += `${remaining.seconds()}—Å`;

            return `${index + 1}. üìÖ ${timer.eventDate.format('DD.MM.YYYY HH:mm')}\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: ${timeLeft}`;
          })
          .join('\n\n');

        await this.bot.sendMessage(
          msg.chat.id,
          'üìã *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã:*\n\n' +
            timersList +
            '\n\n_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cleartimer –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞_',
          {
            parse_mode: 'Markdown',
          },
        );
      });
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞
    this.bot.onText(
      /\/setdate (\d{2})\.(\d{2})\.(\d{4}) (\d{2}):(\d{2})/,
      (msg, match) => {
        this.handleErrors(async () => {
          if (!match) return;

          const [_, day, month, year, hours, minutes] = match;
          const eventDate = moment.tz(
            `${year}-${month}-${day} ${hours}:${minutes}:00`,
            'YYYY-MM-DD HH:mm:ss',
            this.timezone,
          );

          if (!eventDate.isValid()) {
            await this.bot.sendMessage(
              msg.chat.id,
              '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setdate –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú',
            );
            return;
          }

          const timerId = await this.createTimer(eventDate, msg.chat.id);
          await this.bot.sendMessage(
            msg.chat.id,
            `‚úÖ –¢–∞–π–º–µ—Ä (ID: ${timerId}) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${eventDate.format('DD.MM.YYYY HH:mm')}!`,
          );
        });
      },
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã cleartimer –¥–ª—è –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    this.bot.onText(/\/cleartimer(?:\s+(\w+))?/, (msg, match) => {
      this.handleErrors(async () => {
        const timerId = match?.[1];
        const userTimers = Array.from(this.timers.values()).filter(
          (timer) => timer.chatId === msg.chat.id,
        );

        if (userTimers.length === 0) {
          await this.bot.sendMessage(
            msg.chat.id,
            '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤',
          );
          return;
        }

        if (!timerId) {
          const keyboard = userTimers.map((timer) => [
            {
              text: `üìÖ ${timer.eventDate.format('DD.MM.YYYY HH:mm')}`,
              callback_data: `delete_timer_${timer.id}`,
            },
          ]);

          await this.bot.sendMessage(
            msg.chat.id,
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
            {
              reply_markup: { inline_keyboard: keyboard },
            },
          );
          return;
        }

        await this.deleteTimer(timerId, msg.chat.id);
      });
    });

    this.bot.onText(/^\/setdate$/, (msg) => {
      this.handleErrors(async () => {
        const userId = msg.from?.id.toString();
        if (!userId) return;

        this.dateTimeState[userId] = {};
        await this.showYearPicker(msg.chat.id);
      });
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query
    this.bot.on('callback_query', (callbackQuery) => {
      this.handleErrors(async () => {
        const { data, message } = callbackQuery;
        const userId = callbackQuery.from.id.toString();

        if (!message || !data) return;

        if (data.startsWith('delete_timer_')) {
          const timerId = data.replace('delete_timer_', '');
          await this.deleteTimer(timerId, message.chat.id);
          // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
          await this.bot.deleteMessage(message.chat.id, message.message_id);
          await this.bot.answerCallbackQuery(callbackQuery.id, {
            text: '‚úÖ –¢–∞–π–º–µ—Ä —É–¥–∞–ª–µ–Ω',
          });
          return;
        }

        if (data.startsWith('year_')) {
          const year = parseInt(data.split('_')[1]);
          this.dateTimeState[userId] = { year };
          await this.showMonthPicker(message.chat.id);
        } else if (data.startsWith('month_')) {
          const month = parseInt(data.split('_')[1]);
          this.dateTimeState[userId].month = month;
          await this.showDayPicker(message.chat.id, userId);
        } else if (data.startsWith('day_')) {
          const day = parseInt(data.split('_')[1]);
          this.dateTimeState[userId].day = day;
          await this.showHourPicker(message.chat.id);
        } else if (data.startsWith('hour_')) {
          const hour = parseInt(data.split('_')[1]);
          this.dateTimeState[userId].hour = hour;
          await this.showMinutePicker(message.chat.id);
        } else if (data.startsWith('minute_')) {
          const minute = parseInt(data.split('_')[1]);
          this.dateTimeState[userId].minute = minute;
          await this.setDateTime(message.chat.id, userId);
        }

        await this.bot.answerCallbackQuery(callbackQuery.id);
      });
    });
  }

  private async handleErrors(fn: () => Promise<void>) {
    try {
      await fn();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ Telegram —Å–µ—Ä–≤–∏—Å–µ:', error);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å Telegram API
      if (error instanceof Error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
        if (
          error.message.includes('message is not modified') ||
          error.message.includes('message to edit not found') ||
          error.message.includes('message to delete not found')
        ) {
          return;
        }
      }

      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
      throw error;
    }
  }

  private async restoreTimers(): Promise<void> {
    try {
      const savedTimers = await this.prisma.timer.findMany({
        where: { isRunning: true },
      });

      for (const timerData of savedTimers) {
        const eventDate = moment(timerData.eventDate);

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Ç–∞–π–º–µ—Ä—ã
        if (eventDate.isBefore(moment())) {
          await this.prisma.timer.delete({
            where: { id: timerData.id },
          });
          continue;
        }

        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
          const chatMember = await this.bot.getChatMember(
            timerData.chatId,
            (await this.bot.getMe()).id
          );
          const canPin = chatMember.can_pin_messages;

          if (!canPin) {
            // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ - —Ç–∏—Ö–æ —É–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä
            await this.prisma.timer.delete({
              where: { id: timerData.id },
            });
            continue;
          }

          // –ï—Å–ª–∏ –ø—Ä–∞–≤–∞ –µ—Å—Ç—å - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
          const timer: Timer = {
            eventDate,
            id: timerData.id,
            chatId: Number(timerData.chatId),
            pinnedMessageId: timerData.pinnedMessageId,
            isRunning: true,
          };

          this.timers.set(timer.id, timer);
          void this.startTimer(timer.id);
        } catch (error) {
          // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞)
          // —Ç–æ–∂–µ —Ç–∏—Ö–æ —É–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä
          await this.prisma.timer.delete({
            where: { id: timerData.id },
          });
          console.error(
            `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ ${timerData.id}:`,
            error
          );
          continue;
        }
      }

      console.log(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${this.timers.size} —Ç–∞–π–º–µ—Ä–æ–≤`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–æ–≤:', error);
      throw error;
    }
  }

  private async createTimer(
    eventDate: moment.Moment,
    chatId: TelegramBot.ChatId,
  ): Promise<string> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–∞–π–º–µ—Ä–∞
    try {
      const chatMember = await this.bot.getChatMember(chatId, (await this.bot.getMe()).id);
      const canPin = chatMember.can_pin_messages;
      
      if (!canPin) {
        await this.bot.sendMessage(
          chatId,
          '‚ö†Ô∏è –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ç–∞–π–º–µ—Ä–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:\n' +
          '1. –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã\n' +
          '2. –í–∫–ª—é—á–∏—Ç–µ –ø—Ä–∞–≤–æ "–ó–∞–∫—Ä–µ–ø–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è"\n\n' +
          '–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–π–º–µ—Ä —Å–Ω–æ–≤–∞.',
          { parse_mode: 'Markdown' }
        );
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞');
      }
    } catch (error) {
      if (error instanceof Error && error.message === '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞') {
        throw error;
      }
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –±–æ—Ç–∞:', error);
      await this.bot.sendMessage(
        chatId,
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      );
      throw error;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–∞–¥–µ—Ä–æ–º
    const loadingMessage = await this.bot.sendMessage(
      chatId,
      '‚è≥ –°–æ–∑–¥–∞—é —Ç–∞–π–º–µ—Ä...',
    );

    try {
      const timerId = Math.random().toString(36).substr(2, 9);
      const timer: Timer = {
        id: timerId,
        eventDate,
        chatId: Number(chatId),
        pinnedMessageId: null,
        isRunning: true,
      };

      // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
      const loadingStates = ['‚è≥', '‚åõÔ∏è'];
      let currentState = 0;
      const loadingInterval = setInterval(async () => {
        try {
          await this.bot.editMessageText(
            `${loadingStates[currentState]} –°–æ–∑–¥–∞—é —Ç–∞–π–º–µ—Ä...`,
            {
              chat_id: chatId,
              message_id: loadingMessage.message_id,
            },
          );
          currentState = (currentState + 1) % loadingStates.length;
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
        }
      }, 500);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Prisma
      await this.prisma.timer.create({
        data: {
          id: timer.id,
          eventDate: timer.eventDate.toDate(),
          chatId: Number(timer.chatId),
          pinnedMessageId: timer.pinnedMessageId,
          isRunning: timer.isRunning,
        },
      });

      this.timers.set(timerId, timer);
      void this.startTimer(timerId);

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–∞–¥–µ—Ä–æ–º
      clearInterval(loadingInterval);
      await this.bot.deleteMessage(chatId, loadingMessage.message_id);

      return timerId;
    } catch (error) {
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—à–∏–±–∫—É
      await this.bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞', {
        chat_id: chatId,
        message_id: loadingMessage.message_id,
      });
      throw error;
    }
  }

  private async deleteTimer(
    timerId: string,
    chatId: TelegramBot.ChatId,
  ): Promise<void> {
    try {
      const timer = this.timers.get(timerId);

      if (!timer) {
        await this.bot.sendMessage(chatId, '‚ùå –¢–∞–π–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      if (timer.chatId !== chatId) {
        await this.bot.sendMessage(
          chatId,
          '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ç–∞–π–º–µ—Ä—É',
        );
        return;
      }

      timer.isRunning = false;

      if (timer.pinnedMessageId) {
        try {
          await this.bot.unpinChatMessage(chatId, {
            message_id: timer.pinnedMessageId,
          });
          await this.bot.deleteMessage(chatId, timer.pinnedMessageId);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–∏/—É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
      }

      // –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Prisma
      await this.prisma.timer.delete({
        where: { id: timerId },
      });
      this.timers.delete(timerId);

      if (!this.bot.listenerCount('callback_query')) {
        await this.bot.sendMessage(chatId, `‚úÖ –¢–∞–π–º–µ—Ä —É–¥–∞–ª–µ–Ω`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞:', error);
      throw error;
    }
  }

  private async updateTimer(timer: Timer): Promise<void> {
    await this.prisma.timer.update({
      where: { id: timer.id },
      data: {
        pinnedMessageId: timer.pinnedMessageId,
        isRunning: timer.isRunning,
      },
    });
  }

  private async startTimer(timerId: string) {
    const timer = this.timers.get(timerId);
    if (!timer) return;

    try {
      while (timer.isRunning && this.timers.has(timerId)) {
        await this.handleErrors(async () => {
          const now = moment();
          const diff = moment.duration(timer.eventDate.diff(now));
          const milliseconds = diff.asMilliseconds();

          await this.cleanupExpiredTimers(timer.chatId);

          if (milliseconds <= 0) {
            if (timer.pinnedMessageId) {
              try {
                await this.bot.unpinChatMessage(timer.chatId, {
                  message_id: timer.pinnedMessageId,
                });
                await this.bot.deleteMessage(timer.chatId, timer.pinnedMessageId);
              } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–∏/—É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
              }
            }
            await this.bot.sendMessage(timer.chatId, `‚è≥ –í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ! (–¢–∞–π–º–µ—Ä ${timer.id})`);
            this.timers.delete(timerId);
            return;
          }

          let timerText = `‚è≥ –¢–∞–π–º–µ—Ä ${timer.id}\n–û—Å—Ç–∞–ª–æ—Å—å: `;
          const parts: string[] = [];

          if (diff.years() > 0) {
            parts.push(
              `${diff.years()} ${this.pluralize(diff.years(), ['–≥–æ–¥', '–≥–æ–¥–∞', '–ª–µ—Ç'])}`,
            );
          }
          if (diff.months() > 0) {
            parts.push(
              `${diff.months()} ${this.pluralize(diff.months(), ['–º–µ—Å—è—Ü', '–º–µ—Å—è—Ü–∞', '–º–µ—Å—è—Ü–µ–≤'])}`,
            );
          }
          if (diff.days() > 0) {
            parts.push(
              `${diff.days()} ${this.pluralize(diff.days(), ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'])}`,
            );
          }
          if (diff.hours() > 0) {
            parts.push(
              `${diff.hours()} ${this.pluralize(diff.hours(), ['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'])}`,
            );
          }
          if (diff.minutes() > 0) {
            parts.push(
              `${diff.minutes()} ${this.pluralize(diff.minutes(), ['–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç'])}`,
            );
          }
          if (diff.seconds() > 0) {
            parts.push(
              `${diff.seconds()} ${this.pluralize(diff.seconds(), ['—Å–µ–∫—É–Ω–¥–∞', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥'])}`,
            );
          }

          timerText += parts.join(', ');

          if (timer.pinnedMessageId) {
            try {
              await this.bot.editMessageText(timerText, {
                chat_id: timer.chatId,
                message_id: timer.pinnedMessageId,
              });
            } catch (error) {
              if (
                error instanceof Error &&
                error.message.includes('message is not modified')
              ) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
              } else {
                throw error;
              }
            }
          } else {
            try {
              const sentMessage = await this.bot.sendMessage(
                timer.chatId,
                timerText,
              );
              await this.bot.pinChatMessage(timer.chatId, sentMessage.message_id);
              timer.pinnedMessageId = sentMessage.message_id;
            } catch (error) {
              if (error instanceof Error && error.message.includes('not enough rights')) {
                // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await this.bot.sendMessage(
                  timer.chatId,
                  '‚ö†Ô∏è –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ç–∞–π–º–µ—Ä–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:\n' +
                  '1. –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã\n' +
                  '2. –í–∫–ª—é—á–∏—Ç–µ –ø—Ä–∞–≤–æ "–ó–∞–∫—Ä–µ–ø–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è"',
                  { parse_mode: 'Markdown' }
                );
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                timer.isRunning = false;
                this.timers.delete(timerId);
                return;
              }
              throw error;
            }
          }

          await this.updateTimer(timer);
        });

        await new Promise((resolve) => setTimeout(resolve, 5000));
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ ${timerId}:`, error);
      try {
        await this.bot.sendMessage(
          timer.chatId,
          `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ —Ç–∞–π–º–µ—Ä–∞ ${timerId}. –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.`,
        );
      } catch (sendError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', sendError);
      } finally {
        this.timers.delete(timerId);
      }
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ç–∞–π–º–µ—Ä–æ–≤
  private async cleanupExpiredTimers(chatId: number): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
      const chatTimers = Array.from(this.timers.values()).filter(
        (timer) => timer.chatId === chatId
      );

      const now = moment();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∞–π–º–µ—Ä
      for (const timer of chatTimers) {
        // –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω
        if (!timer.isRunning || timer.eventDate.isBefore(now)) {
          if (timer.pinnedMessageId) {
            try {
              // –û—Ç–∫—Ä–µ–ø–ª—è–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
              await this.bot.unpinChatMessage(chatId, {
                message_id: timer.pinnedMessageId,
              });
              await this.bot.deleteMessage(chatId, timer.pinnedMessageId);
            } catch (error) {
              // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
              if (
                error instanceof Error &&
                !error.message.includes('message to delete not found') &&
                !error.message.includes('message to unpin not found')
              ) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ —Ç–∞–π–º–µ—Ä–∞:', error);
              }
            }
          }
          
          // –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∏–∑ –ø–∞–º—è—Ç–∏
          try {
            await this.prisma.timer.delete({
              where: { id: timer.id },
            });
            this.timers.delete(timer.id);
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞ –∏–∑ –ë–î:', error);
          }
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ç–∞–π–º–µ—Ä–æ–≤:', error);
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤
  private pluralize(number: number, words: [string, string, string]): string {
    const cases = [2, 0, 1, 1, 1, 2];
    return words[
      number % 100 > 4 && number % 100 < 20
        ? 2
        : cases[number % 10 < 5 ? number % 10 : 5]
    ];
  }

  private async showYearPicker(chatId: number) {
    const currentYear = moment().year();
    const years = Array.from({ length: 5 }, (_, i) => currentYear + i);
    const keyboard = this.createButtonRows(
      years.map((year) => ({
        text: year.toString(),
        callback_data: `year_${year}`,
      })),
      3,
    );

    await this.bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:', {
      reply_markup: { inline_keyboard: keyboard },
    });
  }

  private async showMonthPicker(chatId: number) {
    const months = moment.months();
    const keyboard = this.createButtonRows(
      months.map((month, index) => ({
        text: month,
        callback_data: `month_${index + 1}`,
      })),
      3,
    );

    await this.bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:', {
      reply_markup: { inline_keyboard: keyboard },
    });
  }

  private async showDayPicker(chatId: number, userId: string) {
    const state = this.dateTimeState[userId];
    const daysInMonth = moment(
      `${state.year}-${state.month}`,
      'YYYY-M',
    ).daysInMonth();
    const days = Array.from({ length: daysInMonth }, (_, i) => i + 1);
    const keyboard = this.createButtonRows(
      days.map((day) => ({
        text: day.toString(),
        callback_data: `day_${day}`,
      })),
      7,
    );

    await this.bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:', {
      reply_markup: { inline_keyboard: keyboard },
    });
  }

  private async showHourPicker(chatId: number) {
    const hours = Array.from({ length: 24 }, (_, i) => i);
    const keyboard = this.createButtonRows(
      hours.map((hour) => ({
        text: hour.toString().padStart(2, '0'),
        callback_data: `hour_${hour}`,
      })),
      6,
    );

    await this.bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:', {
      reply_markup: { inline_keyboard: keyboard },
    });
  }

  private async showMinutePicker(chatId: number) {
    const minutes = [0, 15, 30, 45];
    const keyboard = this.createButtonRows(
      minutes.map((minute) => ({
        text: minute.toString().padStart(2, '0'),
        callback_data: `minute_${minute}`,
      })),
      4,
    );

    await this.bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã:', {
      reply_markup: { inline_keyboard: keyboard },
    });
  }

  private async setDateTime(chatId: number, userId: string) {
    const state = this.dateTimeState[userId];
    const dateString = `${state.year}-${state.month}-${state.day} ${state.hour}:${state.minute}`;
    const eventDate = moment.tz(dateString, 'YYYY-M-D H:m', this.timezone);

    if (!eventDate.isValid()) {
      await this.bot.sendMessage(
        chatId,
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      );
      return;
    }

    try {
      const timerId = await this.createTimer(eventDate, chatId);
      if (timerId) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–π–º–µ—Ä –±—ã–ª —Å–æ–∑–¥–∞–Ω
        await this.bot.sendMessage(
          chatId,
          `‚úÖ –¢–∞–π–º–µ—Ä (ID: ${timerId}) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${eventDate.format('DD.MM.YYYY HH:mm')}!`,
        );
      }
    } catch (error) {
      if (error instanceof Error && error.message === '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞') {
        // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ createTimer
      } else {
        await this.bot.sendMessage(
          chatId,
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        );
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞:', error);
      }
    } finally {
      delete this.dateTimeState[userId];
    }
  }

  private createButtonRows<T extends TelegramBot.InlineKeyboardButton>(
    buttons: T[],
    columnsCount: number,
  ): T[][] {
    return buttons.reduce((rows: T[][], button: T, index: number) => {
      const rowIndex = Math.floor(index / columnsCount);
      if (!rows[rowIndex]) {
        rows[rowIndex] = [];
      }
      rows[rowIndex].push(button);
      return rows;
    }, []);
  }
}
